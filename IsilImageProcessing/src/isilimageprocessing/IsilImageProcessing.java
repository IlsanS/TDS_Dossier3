/*
 * TestCImage2.java
 *
 * Created on 10 juillet 2007, 16:50
 */

package isilimageprocessing;

import CImage.*;
import CImage.Exceptions.*;
import CImage.Observers.*;
import CImage.Observers.Events.*;
import ImageProcessing.Complexe.MatriceComplexe;
import ImageProcessing.Fourier.Fourier;
import ImageProcessing.Histogramme.Histogramme;
import ImageProcessing.Lineaire.FiltrageLinaireGlobal;
import ImageProcessing.Lineaire.FiltrageLineaireLocal;
import ImageProcessing.NonLineaire.MorphoComplexe;
import ImageProcessing.NonLineaire.MorphoElementaire;
import isilimageprocessing.Dialogues.*;
import java.awt.*;
import java.io.*;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author  HP_Propriétaire
 */
public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener,SelectLigneListener,SelectRectListener,SelectRectFillListener,SelectCercleListener,SelectCercleFillListener 
{
    private CImageRGB imageRGB;
    private CImageNG  imageNG;
    
    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int   couleurPinceauNG;
    private int   tailleElemStruct = 1;
    private int[][] masqueGeodesique;
    private int   iterations = 1;
    
    /** Creates new form TestCImage2 */
    public IsilImageProcessing() 
    {
        initComponents();
        
        imageRGB = null;
        imageNG  = null;
        
        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);
        
        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        jMenuTraitementNonLineaire.setEnabled(false);
        
        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        jMenuIHistogrammeParametres = new javax.swing.JMenuItem();
        jMenuHistogrammeTransformations = new javax.swing.JMenu();
        jMenuItemLineaire = new javax.swing.JMenuItem();
        jMenuItemLineaireSaturation = new javax.swing.JMenuItem();
        jMenuItemGamma = new javax.swing.JMenuItem();
        jMenuItemEgalisation = new javax.swing.JMenuItem();
        jMenuItemNegatif = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaire = new javax.swing.JMenu();
        jMenuElementaire = new javax.swing.JMenu();
        jMenuItemErosion = new javax.swing.JMenuItem();
        jMenuItemDilatation = new javax.swing.JMenuItem();
        jMenuItemOuverture = new javax.swing.JMenuItem();
        jMenuItemFermeture = new javax.swing.JMenuItem();
        jMenuComplexe = new javax.swing.JMenu();
        jMenuItemDilatationGeodesique = new javax.swing.JMenuItem();
        jMenuItemReconstructionGeodesique = new javax.swing.JMenuItem();
        jMenuItemFiltreMedian = new javax.swing.JMenuItem();
        jMenuLineaire = new javax.swing.JMenu();
        jMenuGlobal = new javax.swing.JMenu();
        jMenuPB = new javax.swing.JMenuItem();
        jMenuPH = new javax.swing.JMenuItem();
        jMenuPBButter = new javax.swing.JMenuItem();
        jMenuPHButter = new javax.swing.JMenuItem();
        jMenuLocal = new javax.swing.JMenu();
        jMenuConvo = new javax.swing.JMenuItem();
        jMenuMoyenneur = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TestCImage3");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Net 13_p1.jpg"))); // NOI18N
        jMenuImage.setText("Image");

        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/File 65_p3.jpg"))); // NOI18N
        jMenuNouvelle.setText("Nouvelle");

        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Folder 036_p3.jpg"))); // NOI18N
        jMenuOuvrir.setText("Ouvrir");

        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg"))); // NOI18N
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemEnregistrerSous);
        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 59_p3.jpg"))); // NOI18N
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 28_p1.jpg"))); // NOI18N
        jMenuDessiner.setText("Dessiner");

        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 14_p3.jpg"))); // NOI18N
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jMenuItemCouleurPinceau);
        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p1.jpg"))); // NOI18N
        jMenuFourier.setText("Fourier");

        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p3.jpg"))); // NOI18N
        jMenuFourierAfficher.setText("Afficher");

        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_48_hot.jpg"))); // NOI18N
        jMenuHistogramme.setText("Histogramme");

        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficher);

        jMenuIHistogrammeParametres.setText("Paramètres image");
        jMenuIHistogrammeParametres.setPreferredSize(new java.awt.Dimension(175, 37));
        jMenuIHistogrammeParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuIHistogrammeParametresActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuIHistogrammeParametres);

        jMenuHistogrammeTransformations.setText("Transformations");
        jMenuHistogrammeTransformations.setPreferredSize(new java.awt.Dimension(55, 37));

        jMenuItemLineaire.setText("Linéaire");
        jMenuItemLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLineaireActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuItemLineaire);

        jMenuItemLineaireSaturation.setText("Linéaire avec saturation");
        jMenuItemLineaireSaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLineaireSaturationActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuItemLineaireSaturation);

        jMenuItemGamma.setText("Gamma");
        jMenuItemGamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGammaActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuItemGamma);

        jMenuItemEgalisation.setText("Égalisation");
        jMenuItemEgalisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEgalisationActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuItemEgalisation);

        jMenuItemNegatif.setText("Négatif");
        jMenuItemNegatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNegatifActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuItemNegatif);

        jMenuHistogramme.add(jMenuHistogrammeTransformations);

        jMenuBar1.add(jMenuHistogramme);

        jMenuTraitementNonLineaire.setText("Traitement non-linéaire");

        jMenuElementaire.setText("Elementaire");
        jMenuElementaire.setPreferredSize(new java.awt.Dimension(97, 37));

        jMenuItemErosion.setText("Erosion");
        jMenuItemErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemErosionActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemErosion);

        jMenuItemDilatation.setText("Dilatation");
        jMenuItemDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemDilatation);

        jMenuItemOuverture.setText("Ouverture");
        jMenuItemOuverture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvertureActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemOuverture);

        jMenuItemFermeture.setText("Fermeture");
        jMenuItemFermeture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFermetureActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemFermeture);

        jMenuTraitementNonLineaire.add(jMenuElementaire);

        jMenuComplexe.setText("Complexe");
        jMenuComplexe.setPreferredSize(new java.awt.Dimension(97, 37));

        jMenuItemDilatationGeodesique.setText("DilatationGeodesique");
        jMenuItemDilatationGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationGeodesiqueActionPerformed(evt);
            }
        });
        jMenuComplexe.add(jMenuItemDilatationGeodesique);

        jMenuItemReconstructionGeodesique.setText("Reconstruction Geodesique");
        jMenuItemReconstructionGeodesique.setToolTipText("");
        jMenuItemReconstructionGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReconstructionGeodesiqueActionPerformed(evt);
            }
        });
        jMenuComplexe.add(jMenuItemReconstructionGeodesique);

        jMenuItemFiltreMedian.setText("Filtre médian");
        jMenuItemFiltreMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltreMedianActionPerformed(evt);
            }
        });
        jMenuComplexe.add(jMenuItemFiltreMedian);

        jMenuTraitementNonLineaire.add(jMenuComplexe);

        jMenuBar1.add(jMenuTraitementNonLineaire);

        jMenuLineaire.setText(" Lineaire");

        jMenuGlobal.setText("Global");

        jMenuPB.setText("Passe-Bas Idéal");
        jMenuPB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPBActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuPB);

        jMenuPH.setText("Passe-Haut Idéal");
        jMenuPH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPHActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuPH);

        jMenuPBButter.setText("Passe-Bas Butterworth");
        jMenuPBButter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPBButterActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuPBButter);

        jMenuPHButter.setText("Passe-Haut Butterworth");
        jMenuPHButter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPHButterActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuPHButter);

        jMenuLineaire.add(jMenuGlobal);

        jMenuLocal.setText("Local");

        jMenuConvo.setText("Masque Convolution");
        jMenuConvo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuConvoActionPerformed(evt);
            }
        });
        jMenuLocal.add(jMenuConvo);

        jMenuMoyenneur.setText("Masque Moyenneur");
        jMenuMoyenneur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuMoyenneurActionPerformed(evt);
            }
        });
        jMenuLocal.add(jMenuMoyenneur);

        jMenuLineaire.add(jMenuLocal);

        jMenuBar1.add(jMenuLineaire);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(716, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }
        
        // Création du dataset
        XYSeries serie = new XYSeries("Histo");
        for(int i=0 ; i<256 ; i++) serie.add(i,histo[i]);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);
        
        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme","Niveaux de gris","Nombre de pixels",dataset,PlotOrientation.VERTICAL,false,false,false);

        XYPlot plot = (XYPlot)chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0,255);
        plot.setDomainAxis(axeX);
        
        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image",chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void activeMenusNG()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);
        jMenuTraitementNonLineaire.setEnabled(true);
    }
    
    private void activeMenusRGB()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
    }
    
    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieImaginaire,"Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieReelle,"Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,phase,"Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,module,"Fourier : Affichage du module");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    if (imageRGB != null) imageRGB.enregistreFormatPNG(fichier);
                    if (imageNG != null) imageNG.enregistreFormatPNG(fichier);
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageNG = new CImageNG(fichier);
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this,true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null)
        {
            Color newC = JColorChooser.showDialog(this,"Couleur du pinceau",couleurPinceauRGB);
            if (newC != null) couleurPinceauRGB = newC;
            observer.setCouleurPinceau(couleurPinceauRGB);
        }
        
        if (imageNG != null)
        {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this,true,couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this,true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageRGB = new CImageRGB(fichier);
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed

    private void jMenuItemErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemErosionActionPerformed
        JDialogChoixTailleElemStruct dialog = new JDialogChoixTailleElemStruct(this,true,tailleElemStruct);
        dialog.setVisible(true);
        tailleElemStruct = dialog.getTailleMasque();
        try
        {
            this.imageNG.setMatrice(MorphoElementaire.erosion(imageNG.getMatrice(), tailleElemStruct));
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemErosionActionPerformed

    private void jMenuItemDilatationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDilatationActionPerformed
        JDialogChoixTailleElemStruct dialog = new JDialogChoixTailleElemStruct(this,true,tailleElemStruct);
        dialog.setVisible(true);
        tailleElemStruct = dialog.getTailleMasque();
        try
        {
            this.imageNG.setMatrice(MorphoElementaire.dilatation(imageNG.getMatrice(), tailleElemStruct));
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemDilatationActionPerformed

    private void jMenuItemOuvertureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvertureActionPerformed
        JDialogChoixTailleElemStruct dialog = new JDialogChoixTailleElemStruct(this,true,tailleElemStruct);
        dialog.setVisible(true);
        tailleElemStruct = dialog.getTailleMasque();
        try
        {
            this.imageNG.setMatrice(MorphoElementaire.ouverture(imageNG.getMatrice(), tailleElemStruct));
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemOuvertureActionPerformed

    private void jMenuItemFermetureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFermetureActionPerformed
        JDialogChoixTailleElemStruct dialog = new JDialogChoixTailleElemStruct(this,true,tailleElemStruct);
        dialog.setVisible(true);
        tailleElemStruct = dialog.getTailleMasque();
        try
        {
            this.imageNG.setMatrice(MorphoElementaire.fermeture(imageNG.getMatrice(), tailleElemStruct));
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFermetureActionPerformed

    private void jMenuItemDilatationGeodesiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDilatationGeodesiqueActionPerformed
        JDialogChoixGeodesique dialog = 
                new JDialogChoixGeodesique(this,true,tailleElemStruct,iterations,masqueGeodesique);
        dialog.setVisible(true);
        tailleElemStruct = dialog.getTailleMasque();
        iterations = dialog.getNombreIterations();
        masqueGeodesique = dialog.getMasqueGeodesique();
        try
        {
            this.imageNG.setMatrice(MorphoComplexe.dilatationGeodesique(
                    imageNG.getMatrice(), masqueGeodesique, tailleElemStruct, iterations));
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemDilatationGeodesiqueActionPerformed

    private void jMenuItemReconstructionGeodesiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReconstructionGeodesiqueActionPerformed
        JDialogChoixGeodesique dialog = 
                new JDialogChoixGeodesique(this,true,tailleElemStruct,-1,masqueGeodesique);
        dialog.setVisible(true);
        tailleElemStruct = dialog.getTailleMasque();
        masqueGeodesique = dialog.getMasqueGeodesique();
        try
        {
            this.imageNG.setMatrice(MorphoComplexe.reconstructionGeodesique(
                    imageNG.getMatrice(), masqueGeodesique, tailleElemStruct));
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemReconstructionGeodesiqueActionPerformed

    private void jMenuItemFiltreMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltreMedianActionPerformed
        JDialogChoixTailleElemStruct dialog = new JDialogChoixTailleElemStruct(this,true,tailleElemStruct);
        dialog.setVisible(true);
        tailleElemStruct = dialog.getTailleMasque();
        try
        {
            this.imageNG.setMatrice(MorphoComplexe.filtreMedian(imageNG.getMatrice(), tailleElemStruct));
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFiltreMedianActionPerformed

    private void jMenuIHistogrammeParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuIHistogrammeParametresActionPerformed
        //créer la boite de dialogue pour l'affichage des paramètres de l'image
        JDialogParametresImage dialog = new JDialogParametresImage(this, true);
        int[][] matrice = new int[imageNG.getLargeur()][imageNG.getHauteur()];
        
        //récupérer la matrice de l'image
        try
        {
            matrice = imageNG.getMatrice();
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
        
        //récupérer les différents paramètres grâce aux méthodes développées
        //passer les valeurs à la boite de dialogue
        dialog.setMinimum(Histogramme.minimum(matrice));
        dialog.setMaximum(Histogramme.maximum(matrice));
        dialog.setLuminance(Histogramme.luminance(matrice));
        dialog.setContraste1(Histogramme.contraste1(matrice));
        dialog.setContraste2(Histogramme.contraste2(matrice));
        
        //afficher la boite de dialogue
        dialog.setVisible(true);
    }//GEN-LAST:event_jMenuIHistogrammeParametresActionPerformed

    private void jMenuItemLineaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLineaireActionPerformed
        JDialogTransformationsHistogramme jdth = null;
        
        try
        {
            //créer la boite de dialoque de transformation d'histogramme
            jdth = new JDialogTransformationsHistogramme(this, true, 
                    imageNG.getMatrice(), JDialogTransformationsHistogramme.LIN);
            
            //afficher la boite de dialogue
            jdth.setVisible(true);
            
            //récupérer l'image modifiée pour l'afficher si on a quitté avec OK
            if(jdth.isDisplayable())
                imageNG.setMatrice(jdth.getImageAfter());
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemLineaireActionPerformed

    private void jMenuItemLineaireSaturationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLineaireSaturationActionPerformed
        JDialogTransformationsHistogramme jdth = null;
        
        try
        {
            //créer la boite de dialoque de transformation d'histogramme
            jdth = new JDialogTransformationsHistogramme(this, true, 
                    imageNG.getMatrice(), JDialogTransformationsHistogramme.LIN_SAT);
            
            //afficher la boite de dialogue
            jdth.setVisible(true);
            
            //récupérer l'image modifiée pour l'afficher si on a quitté avec OK
            if(jdth.isDisplayable())
                imageNG.setMatrice(jdth.getImageAfter());
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemLineaireSaturationActionPerformed

    private void jMenuItemGammaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGammaActionPerformed
        JDialogTransformationsHistogramme jdth = null;
        
        try
        {
            //créer la boite de dialoque de transformation d'histogramme
            jdth = new JDialogTransformationsHistogramme(this, true, 
                    imageNG.getMatrice(), JDialogTransformationsHistogramme.GAMMA);
            
            //afficher la boite de dialogue
            jdth.setVisible(true);
            
            //récupérer l'image modifiée pour l'afficher si on a quitté avec OK
            if(jdth.isDisplayable())
                imageNG.setMatrice(jdth.getImageAfter());
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemGammaActionPerformed

    private void jMenuItemEgalisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEgalisationActionPerformed
        JDialogTransformationsHistogramme jdth = null;
        
        try
        {
            //créer la boite de dialoque de transformation d'histogramme
            jdth = new JDialogTransformationsHistogramme(this, true, 
                    imageNG.getMatrice(), JDialogTransformationsHistogramme.EGALI);
            
            //afficher la boite de dialogue
            jdth.setVisible(true);
            
            //récupérer l'image modifiée pour l'afficher si on a quitté avec OK
            if(jdth.isDisplayable())
                imageNG.setMatrice(jdth.getImageAfter());
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemEgalisationActionPerformed

    private void jMenuItemNegatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNegatifActionPerformed
        JDialogTransformationsHistogramme jdth = null;
        
        try
        {
            //créer la boite de dialoque de transformation d'histogramme
            jdth = new JDialogTransformationsHistogramme(this, true, 
                    imageNG.getMatrice(), JDialogTransformationsHistogramme.NEGATIF);
            
            //afficher la boite de dialogue
            jdth.setVisible(true);
            
            //récupérer l'image modifiée pour l'afficher si on a quitté avec OK
            if(jdth.isDisplayable())
                imageNG.setMatrice(jdth.getImageAfter());
        }
        catch(CImageNGException ex)
        {
            System.err.println("Erreur NG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemNegatifActionPerformed

    private void jMenuPBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPBActionPerformed
        JDialogChoixParamètreFiltre dialog = new JDialogChoixParamètreFiltre(this, true, false);
        dialog.setVisible(true);

        int fc = dialog.getFrequenceCoupure();
        try
        {
            int[][] img;
            if(imageNG == null)
            {
                img = imageRGB.getCImageNG().getMatrice();
            }
            else
            {
                img = imageNG.getMatrice();
            }

            img = FiltrageLinaireGlobal.PasseBasIdeal(img, fc);

            JDialogShowImage dialog2 = new JDialogShowImage(this, false, new CImageNG(img));
            dialog2.setVisible(true);
        }
        catch (CImageNGException ex) { JOptionPane.showMessageDialog(this, ex.getMessage()); }
    }//GEN-LAST:event_jMenuPBActionPerformed

    private void jMenuPHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPHActionPerformed
     JDialogChoixParamètreFiltre dialog = new JDialogChoixParamètreFiltre(this, true, false);
        dialog.setVisible(true);

        int fc = dialog.getFrequenceCoupure();
        try
        {
            int[][] img;
            if(imageNG == null)
            {
                img = imageRGB.getCImageNG().getMatrice();
            }
            else
            {
                img = imageNG.getMatrice();
            }

            img = FiltrageLinaireGlobal.PasseHautIdeal(img, fc);

            JDialogShowImage dialog2 = new JDialogShowImage(this, false, new CImageNG(img));
            dialog2.setVisible(true);
        }
        catch (CImageNGException ex) { JOptionPane.showMessageDialog(this, ex.getMessage()); }
    }//GEN-LAST:event_jMenuPHActionPerformed

    private void jMenuPBButterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPBButterActionPerformed
        JDialogChoixParamètreFiltre dialog = new JDialogChoixParamètreFiltre(this, true, true);
        dialog.setVisible(true);

        int fc = dialog.getFrequenceCoupure();
        int ordre=dialog.getOrdre();
        try
        {
            int[][] img;
            if(imageNG == null)
            {
                img = imageRGB.getCImageNG().getMatrice();
            }
            else
            {
                img = imageNG.getMatrice();
            }

            img = FiltrageLinaireGlobal.PasseBasButterworth(img, fc, ordre);

            JDialogShowImage dialog2 = new JDialogShowImage(this, false, new CImageNG(img));
            dialog2.setVisible(true);
        }
        catch (CImageNGException ex) { JOptionPane.showMessageDialog(this, ex.getMessage()); }
    }//GEN-LAST:event_jMenuPBButterActionPerformed

    private void jMenuPHButterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPHButterActionPerformed
            JDialogChoixParamètreFiltre dialog = new JDialogChoixParamètreFiltre(this, true, true);
        dialog.setVisible(true);

        int fc = dialog.getFrequenceCoupure();
        int ordre=dialog.getOrdre();
        try
        {
            int[][] img;
            if(imageNG == null)
            {
                img = imageRGB.getCImageNG().getMatrice();
            }
            else
            {
                img = imageNG.getMatrice();
            }

            img = FiltrageLinaireGlobal.PasseHautButterworth(img, fc, ordre);

            JDialogShowImage dialog2 = new JDialogShowImage(this, false, new CImageNG(img));
            dialog2.setVisible(true);
        }
        catch (CImageNGException ex) { JOptionPane.showMessageDialog(this, ex.getMessage()); }
    }//GEN-LAST:event_jMenuPHButterActionPerformed

    private void jMenuConvoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuConvoActionPerformed
        JDialogChoixMasqueConvolution dialog = new JDialogChoixMasqueConvolution(this,true);
        dialog.setVisible(true);

        double[][] masque = dialog.getMasque();
        try
        {
            int[][] img;
            if(imageNG == null)
            {
                img = imageRGB.getCImageNG().getMatrice();
            }
            else
            {
                img = imageNG.getMatrice();
            }

            img = FiltrageLineaireLocal.filtreMasqueConvolution(img, masque);

            JDialogShowImage dis = new JDialogShowImage(this, false, new CImageNG(img));
            dis.setVisible(true);
        }
        catch (CImageNGException ex) { JOptionPane.showMessageDialog(this, ex.getMessage()); }
    }//GEN-LAST:event_jMenuConvoActionPerformed

    private void jMenuMoyenneurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuMoyenneurActionPerformed
        JDialogChoixTailleMasqueMoyenneur dialog = new JDialogChoixTailleMasqueMoyenneur(this,true);
        dialog.setVisible(true);

        int taille = dialog.getTaille();
        try
        {
            int[][] img;
            if(imageNG == null)
            {
                img = imageRGB.getCImageNG().getMatrice();
            }
            else
            {
                img = imageNG.getMatrice();
            }

                img = FiltrageLineaireLocal.filtreMoyenneur(img, taille);

                JDialogShowImage dialog2 = new JDialogShowImage(this, false, new CImageNG(img));
                dialog2.setVisible(true);
            }
            catch (CImageNGException ex) { JOptionPane.showMessageDialog(this, ex.getMessage()); 
       }
    }//GEN-LAST:event_jMenuMoyenneurActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) 
    {
        if (jCheckBoxMenuItemDessinerPixel.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.setPixel(e.getX(),e.getY(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.setPixel(e.getX(),e.getY(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerLigne.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCercle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuComplexe;
    private javax.swing.JMenuItem jMenuConvo;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuElementaire;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuGlobal;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private javax.swing.JMenu jMenuHistogrammeTransformations;
    private javax.swing.JMenuItem jMenuIHistogrammeParametres;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemDilatation;
    private javax.swing.JMenuItem jMenuItemDilatationGeodesique;
    private javax.swing.JMenuItem jMenuItemEgalisation;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemErosion;
    private javax.swing.JMenuItem jMenuItemFermeture;
    private javax.swing.JMenuItem jMenuItemFiltreMedian;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemGamma;
    private javax.swing.JMenuItem jMenuItemLineaire;
    private javax.swing.JMenuItem jMenuItemLineaireSaturation;
    private javax.swing.JMenuItem jMenuItemNegatif;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuverture;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenuItem jMenuItemReconstructionGeodesique;
    private javax.swing.JMenu jMenuLineaire;
    private javax.swing.JMenu jMenuLocal;
    private javax.swing.JMenuItem jMenuMoyenneur;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuPB;
    private javax.swing.JMenuItem jMenuPBButter;
    private javax.swing.JMenuItem jMenuPH;
    private javax.swing.JMenuItem jMenuPHButter;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JMenu jMenuTraitementNonLineaire;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
    
}
